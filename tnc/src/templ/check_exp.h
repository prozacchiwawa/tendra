/*
 * Copyright 2002-2011, The TenDRA Project.
 * Copyright 1997, United Kingdom Secretary of State for Defence.
 *
 * See doc/copyright/ for the full copyright terms.
 */


@special exp
@special tag
@special nat
@special bool
@special string
@special shape
@special variety
@special floating_variety
@special bitfield_variety
@special alignment
@special exp_list
@special exp_option
/* AUTOMATICALLY GENERATED BY %ZX VERSION %ZV FROM TDF %VA.%VB */

#define sub0(X)	((X)->child)
#define sub1(X)	((X)->child->next)
#define sub2(X)	((X)->child->next->next)
#define sub3(X)	((X)->child->next->next->next)
#define sub4(X)	((X)->child->next->next->next->next)
#define sub5(X)	((X)->child->next->next->next->next->next)
#define sub6(X)	((X)->child->next->next->next->next->next->next)
#define sub7(X)	((X)->child->next->next->next->next->next->next->next)


/*
    SET THE SHAPE OF AN EXPRESSION

    The shape of the expression exp is calculated and assigned.  Most of
    the work is done by the check routines above, as selected by an
    automatically generated switch statement.
*/

void
check_exp_fn(node *exp)
{
    long m;
    if (exp == NULL) {
	return;
    }
    m = exp->cons->encoding;
    if (m == ENC_labelled) {
	node *placelabs_intro = sub0(exp);
	node *places = sub2(exp);
	if (placelabs_intro->cons->encoding != places->cons->encoding) {
	    input_error("Labels don't match exps in labelled");
	}
    }
    if (do_check) {
	if (exp->shape) {
	    return;
	}
	checking = exp->cons->name;
	switch (m) {
@loop sort
@if sort.eq.exp
@loop sort.cons
	    case ENC_%27CN: {
@loop cons.param
@if param.sort.special
		node *%PN = sub%PE(exp);
@else
@if param.sort.dummy
		%PSN parameter, %PN, messes things up!
@endif
@endif
@end
		CHECK_%25CN
		break;
	    }
@end
@endif
@end
	}
	exp->shape = expand_fully(exp->shape);
    }
    return;
}
